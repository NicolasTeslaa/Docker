# Comandos CLI

# ApÃ³s jÃ¡ ter criado o docker file

```bash
docker build -t (nome da imagem) -f (diretÃ³rio de uso, exemplo: api/db/Dockerfile) .
```

<aside>
ğŸ’¡ -t  (nome da imagem) (significa tag e que estamos dando um nome para a imagem)

</aside>

<aside>
ğŸ’¡ -f (diretÃ³rio de uso, exemplo: api/db/Dockerfile) (direciona o diretÃ³rio onde estarÃ¡ o dockerfile)

</aside>

# Visualizar as imagens disponiveis para uso

<aside>
ğŸ’¡ docker image ls

</aside>

## ApÃ³s a imagem jÃ¡ ter sido criada

para executar a imagedocker 

```bash
docker run -d --rm --name (nomecontainer) (nome image container)
```

<aside>
ğŸ’¡ -d ( executa em backgroud, o terminal nao fica preso na exibiÃ§Ã£o das informaÃ§Ãµes sobre o container ou seja, nÃ£o iriamos conseguir usar o terminal sem esse parametro, usando o -d podemos continuar usando o mesmo terminal
apÃ³s a criaÃ§Ã£o do container)

</aside>

<aside>
ğŸ’¡ â€”rm (signfica que se jÃ¡ houver um container com o mesmo objetivo, ele irÃ¡ apagar o container anterior e criar um novo )

</aside>

<aside>
ğŸ’¡ â€”name (nomecontainer) (forma o nome do container que facilitarÃ¡ a identificaÃ§Ã£o do mesmo)

</aside>

# Para executar comandos enquanto o container estÃ¡ ativo e operando

```bash
docker exec -i (nome do container) (comando a ser executado) 
```

<aside>
ğŸ’¡ -i (comando no modo interativo, permite que o processo nÃ£o seja finalizado atÃ© ser concluido)

</aside>

# Para acessar o container e ver os resultados

```bash
docker exec -it (nome terminal) (comando a ser executado - /bin/bash)
```

<aside>
ğŸ’¡ -it ( signfica que vamos utilizar o TTY que signfica terminal )

</aside>